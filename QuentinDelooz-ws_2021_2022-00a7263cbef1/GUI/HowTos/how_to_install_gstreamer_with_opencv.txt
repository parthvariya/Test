# how to install openCV ubuntu 18.04 with gstreamer creating a python venv #

***** Step #1: Install OpenCV dependencies on Ubuntu 18.04 *****

sudo apt-get install build-essential cmake unzip pkg-config

sudo apt-get install libjpeg-dev libpng-dev libtiff-dev

sudo apt-get install libjasper-dev

-- If you receive an error about libjasper-dev
being missing then follow the following instructions --

sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"

sudo apt update

sudo apt install libjasper1 libjasper-dev

-- else continue here --

sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev

sudo apt-get install libxvidcore-dev libx264-dev

sudo apt-get install libgtk-3-dev

-- I always recommend the following two libraries which will optimize various OpenCV functions --

sudo apt-get install libatlas-base-dev gfortran

-- install python 3 headers and libs

sudo apt-get install python3.6-dev

***** Step #2: Download the official OpenCV source *****

-- Since we’re continuing to work in the terminal, let’s download the official OpenCV release using wget --

wget -O opencv.zip https://github.com/opencv/opencv/archive/4.1.1.zip

-- Followed by the opencv_contrib module --

wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.1.zip

-- Now, let's unzip the archieves --

unzip opencv.zip

unzip opencv_contrib.zip

-- rename the directories --

mv opencv-4.1.1 opencv

mv opencv_contrib-4.1.1 opencv_contrib

-- install pip --

wget https://bootstrap.pypa.io/get-pip.py

sudo python3 get-pip.py

-- Making use of virtual environments for Python development --

sudo pip install virtualenv virtualenvwrapper

sudo rm -rf ~/get-pip.py ~/.cache/pip

-- To finish the install we need to update our ~/.bashrc file --
-- Using a terminal text editor such as vi/vim or nano, add the following lines to your ~/.bashrc -- (vim ~/.bashrc)

# virtualenv and virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
source /usr/local/bin/virtualenvwrapper.sh

-- Next, source the ~/.bashrc file --

source ~/.bashrc

-- Creating a virtual environment to hold OpenCV and additional packages --

mkvirtualenv cv -p python3

-- Let’s verify that we’re in the cv environment by using the workon command --

workon cv

-- Install NumPy in your environment --

pip install numpy

***** Step #4: Configure and compile OpenCV for Ubuntu 18.04 *****

-- Configure OpenCV with CMake --
-- Let’s set up our OpenCV build using cmake --

cd ~/opencv
mkdir build
cd build

cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D WITH_CUDA=OFF \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
-D OPENCV_ENABLE_NONFREE=ON \
-D ENABLE_PRECOMPILED_HEADERS=OFF \
-D WITH_GSTREAMER=ON \
-D BUILD_EXAMPLES=ON ..



cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D INSTALL_C_EXAMPLES=OFF \
-D PYTHON_EXECUTABLE=$(which python3) \
-D BUILD_opencv_python2=OFF \
-D CMAKE_INSTALL_PREFIX=$(python3 -c “import sys; print(sys.prefix)”) \
-D PYTHON3_EXECUTABLE=$(which python3) \
-D PYTHON3_INCLUDE_DIR=$(python3 -c “from distutils.sysconfig import get_python_inc; print(get_python_inc())”) \
-D PYTHON3_PACKAGES_PATH=$(python3 -c “from distutils.sysconfig import get_python_lib; print(get_python_lib())”) \
-D WITH_GSTREAMER=ON \
-D BUILD_EXAMPLES=ON ..

-- Let's compile OpenCV using make -- 4 refers to number of cores, you can update the numeral or leave the floag off althogether

make -j4

-- Installing and verifying OpenCV --
-- Upon a successful, 100% complete compile you can now install OpenCV --

sudo make install

sudo ldconfig

-- To verify the install, sometimes I like to enter the following command in the terminal --

pkg-config --modversion opencv (should give 4.1.1) gave 3.2.0

***** Step #5: Finish your Python+ OpenCV + Ubuntu 18.04 install *****

-- At this point, your Python 3 bindings for OpenCV should reside in the following folder --

ls /usr/local/python/cv2/python-3.6 (should give: cv2.cpython-36m-x86_64-linux-gnu.so)

-- if directory doesnt exist look here: /usr/local/lib/python3.6/site-packages/cv2...

-- Let’s rename them to simply cv2.so --

cd /usr/local/python/cv2/python-3.6

sudo mv cv2.cpython-36m-x86_64-linux-gnu.so cv2.so

-- Our last sub-step is to sym-link our OpenCV cv2.so bindings into our cv virtual environment --

cd ~/.virtualenvs/cv/lib/python3.6/site-packages/

ln -s /usr/local/python/cv2/python-3.6/cv2.so cv2.so